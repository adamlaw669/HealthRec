{"version":3,"file":"GoogleCallback-NUSKs9sl.js","sources":["../../app/features/auth/GoogleCallback.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { googleCallback } from '../../api/api';\n\n// Debug component to show logs in case of errors\ninterface DebugInfoProps {\n  error: string | null;\n  logs: string[];\n}\n\nconst DebugInfo: React.FC<DebugInfoProps> = ({ error, logs }) => {\n  if (!error) return null;\n  \n  return (\n    <div className=\"mt-4 p-4 bg-gray-100 dark:bg-gray-800 rounded text-xs font-mono max-h-[30vh] overflow-auto\">\n      <h3 className=\"text-red-500 mb-2\">Error: {error}</h3>\n      {logs.length > 0 && (\n        <div>\n          <h4 className=\"text-gray-700 dark:text-gray-300 mb-1\">Debug logs:</h4>\n          {logs.map((log, i) => (\n            <div key={i} className=\"text-gray-600 dark:text-gray-400\">\n              {log}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst GoogleCallback = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const [error, setError] = useState<string | null>(null);\n  const [logs, setLogs] = useState<string[]>([]);\n\n  const addLog = (message: string) => {\n    console.log(message);\n    setLogs(prev => [...prev, message]);\n  };\n\n  useEffect(() => {\n    const handleCallback = async () => {\n      try {\n        // First check if we have tokens directly in URL (server-side flow)\n        const token = searchParams.get('token');\n        const refresh = searchParams.get('refresh');\n        \n        addLog(`Checking for tokens in URL: token=${!!token}, refresh=${!!refresh}`);\n        addLog(`URL params: ${JSON.stringify(Object.fromEntries(searchParams.entries()))}`);\n        \n        if (token && refresh) {\n          addLog('Tokens found in URL, storing directly');\n          try {\n            // First clear any existing tokens to avoid conflicts\n            localStorage.removeItem('token');\n            localStorage.removeItem('refresh');\n            \n            // Store tokens in localStorage\n            localStorage.setItem('token', token);\n            localStorage.setItem('refresh', refresh);\n            \n            // Verify storage worked\n            const storedToken = localStorage.getItem('token');\n            const storedRefresh = localStorage.getItem('refresh');\n            \n            if (!storedToken || !storedRefresh) {\n              throw new Error('Failed to store tokens in localStorage');\n            }\n            \n            addLog('Authentication successful via redirect with tokens');\n            \n            // Allow a slight delay for token to be properly set before redirecting\n            setTimeout(() => {\n              navigate('/dashboard');\n            }, 500);\n            return;\n          } catch (storageError: any) {\n            addLog(`LocalStorage error: ${storageError.message}`);\n            // Continue to code-based authentication as fallback\n          }\n        }\n        \n        // If no tokens, check for authorization code (client-side flow)\n        const code = searchParams.get('code');\n        addLog(`Authorization code present: ${!!code}`);\n        \n        if (!code) {\n          throw new Error('No authorization code or tokens received');\n        }\n\n        addLog(`Exchanging code for token: ${code.substring(0, 10)}...`);\n        const response = await googleCallback(code);\n        addLog(`Response received with keys: ${Object.keys(response).join(', ')}`);\n        \n        if (response.token) {\n          addLog('Token found in response, storing tokens');\n          try {\n            // First clear any existing tokens\n            localStorage.removeItem('token');\n            localStorage.removeItem('refresh');\n            \n            // Store new tokens\n            localStorage.setItem('token', response.token);\n            if (response.refresh) {\n              localStorage.setItem('refresh', response.refresh);\n            }\n            \n            // Verify storage\n            const storedToken = localStorage.getItem('token');\n            if (!storedToken) {\n              throw new Error('Failed to store token in localStorage');\n            }\n            \n            addLog('Authentication successful via code exchange');\n            \n            // Allow a slight delay for token to be properly set before redirecting\n            setTimeout(() => {\n              navigate('/dashboard');\n            }, 500);\n          } catch (storageError: any) {\n            throw new Error(`LocalStorage error: ${storageError.message}`);\n          }\n        } else if (response.redirected && response.location) {\n          addLog(`Received redirect to: ${response.location}`);\n          window.location.href = response.location;\n        } else {\n          // Try to extract any useful error information from the response\n          const errorMessage = response.error || response.message || 'Invalid response format';\n          addLog(`Error in response: ${errorMessage}`);\n          throw new Error(errorMessage);\n        }\n      } catch (error: any) {\n        console.error('Google callback error:', error);\n        setError(error.message || 'Authentication failed');\n        addLog(`Error during authentication: ${error.message}`);\n        \n        // Don't navigate away immediately so user can see the error\n        setTimeout(() => {\n          navigate('/auth?mode=signin&error=google_login_failed');\n        }, 5000);\n      }\n    };\n\n    handleCallback();\n  }, [searchParams, navigate]);\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n      <div className=\"text-center\">\n        {!error && (\n          <>\n            <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600 dark:text-gray-300\">Processing login...</p>\n          </>\n        )}\n        {error && (\n          <>\n            <div className=\"text-red-500 text-xl mb-4\">Authentication Failed</div>\n            <p className=\"mb-4\">Redirecting to login page in a few seconds...</p>\n            <button \n              onClick={() => navigate('/auth?mode=signin')}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n            >\n              Return to Login\n            </button>\n          </>\n        )}\n        <DebugInfo error={error} logs={logs} />\n      </div>\n    </div>\n  );\n};\n\nexport default GoogleCallback; "],"names":["DebugInfo","error","logs","jsxs","jsx","log","i","GoogleCallback","searchParams","useSearchParams","navigate","useNavigate","setError","useState","setLogs","addLog","message","prev","useEffect","token","refresh","storedToken","storedRefresh","storageError","code","response","googleCallback","errorMessage","Fragment"],"mappings":"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"}