{"version":3,"file":"page-9nVK-o3v.js","sources":["../../app/auth/callback/page.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { googleCallback } from '../../api/api';\n\n// Define log entry type\ninterface LogEntry {\n  time: string;\n  message: string;\n  type: 'info' | 'error';\n}\n\n// Debug component to show logs in UI for easier troubleshooting\nconst DebugConsole = ({ logs }: { logs: LogEntry[] }) => {\n  if (!logs || logs.length === 0) return null;\n  \n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-gray-800 text-green-400 p-4 max-h-[30vh] overflow-auto text-xs font-mono\">\n      <div className=\"flex justify-between mb-2\">\n        <h3 className=\"text-white\">Debug Console</h3>\n        <button className=\"text-white\" onClick={() => console.clear()}>Clear</button>\n      </div>\n      <div>\n        {logs.map((log, i) => (\n          <div key={i} className={`${log.type === 'error' ? 'text-red-400' : 'text-green-400'}`}>\n            {log.time}: {log.message}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function AuthCallback() {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [error, setError] = useState<string | null>(null);\n  const [_, setLoading] = useState(true);\n  const [logs, setLogs] = useState<LogEntry[]>([]);\n  \n  // Custom logger function that both logs to console and stores for UI\n  const log = (message: string, type: 'info' | 'error' = 'info') => {\n    const time = new Date().toLocaleTimeString();\n    console.log(`[${time}] ${message}`);\n    setLogs(prev => [...prev, { time, message, type }]);\n  };\n  \n  const logError = (message: string) => {\n    const time = new Date().toLocaleTimeString();\n    console.error(`[${time}] ${message}`);\n    setLogs(prev => [...prev, { time, message, type: 'error' }]);\n  };\n\n  useEffect(() => {\n    const handleCallback = async () => {\n      try {\n        log('Auth callback initiated');\n        log(`URL params: ${JSON.stringify(Object.fromEntries(searchParams.entries()))}`);\n        \n        // First check if we have tokens directly in URL (server-side flow)\n        const token = searchParams.get('token');\n        const refresh = searchParams.get('refresh');\n        //const isNewUser = searchParams.get('isNewUser');\n        \n        if (token && refresh) {\n          log('Token found in URL, storing and redirecting');\n          \n          try {\n            // Store tokens in localStorage\n            localStorage.setItem('token', token);\n            localStorage.setItem('refresh', refresh);\n            \n            // Verify storage worked\n            const storedToken = localStorage.getItem('token');\n            const storedRefresh = localStorage.getItem('refresh');\n            log(`Token storage verification - token: ${storedToken ? 'Success' : 'Failed'}, refresh: ${storedRefresh ? 'Success' : 'Failed'}`);\n            \n            if (!storedToken || !storedRefresh) {\n              logError('Failed to store tokens in localStorage');\n              throw new Error('Token storage failed');\n            }\n            \n            log('Authentication successful via redirect');\n            setLoading(false);\n            navigate('/dashboard');\n            return;\n          } catch (storageError) {\n            logError(`LocalStorage error: ${storageError instanceof Error ? storageError.message : 'Unknown error'}`);\n            // Continue to code-based authentication as fallback\n          }\n        }\n        \n        // If no tokens, check for authorization code (client-side flow)\n        const code = searchParams.get('code');\n        log(`Authorization code present: ${!!code}`);\n        \n        if (!code) {\n          logError('No code or tokens received in callback');\n          setError('No authorization code received');\n          setLoading(false);\n          navigate('/?mode=signin&error=google_login_failed');\n          return;\n        }\n\n        log(`Exchanging code for token: ${code.substring(0, 10)}...`);\n        try {\n          const userData = await googleCallback(code);\n          log(`Received user data response: ${JSON.stringify(userData)}`);\n          \n          if (userData && userData.token) {\n            // Store tokens from API response\n            log('Storing tokens from response');\n            try {\n              localStorage.setItem('token', userData.token);\n              if (userData.refresh) {\n                localStorage.setItem('refresh', userData.refresh);\n              }\n              \n              // Verify storage worked\n              const storedToken = localStorage.getItem('token');\n              const storedRefresh = localStorage.getItem('refresh');\n              log(`Token storage verification - token: ${storedToken ? 'Success' : 'Failed'}, refresh: ${storedRefresh ? 'Success' : 'Failed'}`);\n              \n              log('Authentication successful via code exchange');\n              setLoading(false);\n              navigate('/dashboard');\n            } catch (storageError) {\n              logError(`LocalStorage error during token storage: ${storageError instanceof Error ? storageError.message : 'Unknown error'}`);\n              setError('Failed to store authentication tokens');\n              setLoading(false);\n              navigate('/?mode=signin&error=storage_failed');\n            }\n          } else if (userData && userData.redirected) {\n            log('Redirect handled by googleCallback function');\n            setLoading(false);\n            // The redirect will happen automatically, no need to navigate\n          } else {\n            logError(`Authentication failed: Invalid response format: ${JSON.stringify(userData)}`);\n            setError('Invalid response format from server');\n            setLoading(false);\n            navigate('/?mode=signin&error=google_login_failed');\n          }\n        } catch (callbackError) {\n          logError(`Error in googleCallback: ${callbackError instanceof Error ? callbackError.message : 'Unknown error'}`);\n          throw callbackError;\n        }\n      } catch (error) {\n        logError(`Error during authentication: ${error instanceof Error ? error.message: 'Unknown error'}`);\n        setError(error instanceof Error ? error.message : 'Unknown error');\n        setLoading(false);\n        navigate('/?mode=signin&error=google_login_failed');\n      }\n    };\n\n    handleCallback();\n  }, [searchParams, navigate]);\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen\">\n        <div className=\"text-red-500 mb-4\">Error: {error}</div>\n        <button \n          onClick={() => navigate('/')} \n          className=\"px-4 py-2 bg-primary text-white rounded\"\n        >\n          Return to Login\n        </button>\n        <DebugConsole logs={logs} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen\">\n      <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin\" />\n      <div className=\"mt-4\">Processing authentication...</div>\n      <DebugConsole logs={logs} />\n    </div>\n  );\n} "],"names":["DebugConsole","logs","jsxs","jsx","log","i","AuthCallback","navigate","useNavigate","searchParams","useSearchParams","error","setError","useState","_","setLoading","setLogs","message","type","time","prev","logError","useEffect","token","refresh","storedToken","storedRefresh","storageError","code","userData","googleCallback","callbackError"],"mappings":"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"}